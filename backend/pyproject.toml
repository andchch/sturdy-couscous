[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages"
]

line-length = 89
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "B", "Q"]
ignore = ["B008", "B904"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["B"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.poetry]
package-mode = false
name = "gamers-social-network"
version = "0.0.1"
description = "A social network for gamers"
authors = ["Andrey Martinich <aimartinich@edu.hse.ru>", "Anna Luneva <aaluneva@edu.hse.ru>"]

[tool.poetry.dependencies]
python = "^3.12"
PyJWT = "^2.9.0"
bcrypt = "4.0.1"
pydantic-settings = "^2.5.2"
sqlalchemy = "^2.0.35"
asyncpg = "^0.29.0"
alembic = "^1.13.3"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
fastapi = {extras = ["standard"], version = "^0.115.0"}
motor = "^3.6.0"
numpy = "^2.1.2"
scikit-learn = "^1.5.2"
ruff = "^0.6.9"
aiosqlite = "^0.20.0"
faker = "^30.3.0"
sqlalchemy-schemadisplay = "^2.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
