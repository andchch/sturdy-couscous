// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: rs/rs.proto

package rsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rs_CountSimilarity_FullMethodName  = "/rs.Rs/CountSimilarity"
	Rs_FindSimilarUsers_FullMethodName = "/rs.Rs/FindSimilarUsers"
)

// RsClient is the client API for Rs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RsClient interface {
	CountSimilarity(ctx context.Context, in *CountSimRequest, opts ...grpc.CallOption) (*CountSimResponse, error)
	FindSimilarUsers(ctx context.Context, in *FindSimUsersRequest, opts ...grpc.CallOption) (*FindSimUsersResponse, error)
}

type rsClient struct {
	cc grpc.ClientConnInterface
}

func NewRsClient(cc grpc.ClientConnInterface) RsClient {
	return &rsClient{cc}
}

func (c *rsClient) CountSimilarity(ctx context.Context, in *CountSimRequest, opts ...grpc.CallOption) (*CountSimResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountSimResponse)
	err := c.cc.Invoke(ctx, Rs_CountSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsClient) FindSimilarUsers(ctx context.Context, in *FindSimUsersRequest, opts ...grpc.CallOption) (*FindSimUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSimUsersResponse)
	err := c.cc.Invoke(ctx, Rs_FindSimilarUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RsServer is the server API for Rs service.
// All implementations must embed UnimplementedRsServer
// for forward compatibility.
type RsServer interface {
	CountSimilarity(context.Context, *CountSimRequest) (*CountSimResponse, error)
	FindSimilarUsers(context.Context, *FindSimUsersRequest) (*FindSimUsersResponse, error)
	mustEmbedUnimplementedRsServer()
}

// UnimplementedRsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRsServer struct{}

func (UnimplementedRsServer) CountSimilarity(context.Context, *CountSimRequest) (*CountSimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSimilarity not implemented")
}
func (UnimplementedRsServer) FindSimilarUsers(context.Context, *FindSimUsersRequest) (*FindSimUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSimilarUsers not implemented")
}
func (UnimplementedRsServer) mustEmbedUnimplementedRsServer() {}
func (UnimplementedRsServer) testEmbeddedByValue()            {}

// UnsafeRsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RsServer will
// result in compilation errors.
type UnsafeRsServer interface {
	mustEmbedUnimplementedRsServer()
}

func RegisterRsServer(s grpc.ServiceRegistrar, srv RsServer) {
	// If the following call pancis, it indicates UnimplementedRsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rs_ServiceDesc, srv)
}

func _Rs_CountSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsServer).CountSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rs_CountSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsServer).CountSimilarity(ctx, req.(*CountSimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rs_FindSimilarUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSimUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsServer).FindSimilarUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rs_FindSimilarUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsServer).FindSimilarUsers(ctx, req.(*FindSimUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rs_ServiceDesc is the grpc.ServiceDesc for Rs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rs.Rs",
	HandlerType: (*RsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountSimilarity",
			Handler:    _Rs_CountSimilarity_Handler,
		},
		{
			MethodName: "FindSimilarUsers",
			Handler:    _Rs_FindSimilarUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rs/rs.proto",
}
