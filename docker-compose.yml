version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_gsn
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - '5433:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - gsn_network

  mongo:
    image: mongo:latest
    container_name: mongo_gsn
    # restart: unless-stopped
    ports:
      - '27017:27017'
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
    #   MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 256M
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - gsn_network

  # mongo-express:
  #   image: mongo-express:latest
  #   container_name: mongo_express_gsn
  #   restart: unless-stopped
  #   ports:
  #     - '8081:8081'
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
  #     ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
  #     ME_CONFIG_BASICAUTH: false
  #   depends_on:
  #     mongo:
  #       condition: service_healthy
  #   networks:
  #     - gsn_network

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --save 60 1 --loglevel warning --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - gsn_network

  # redis_viewer:
  #   image: marian/rebrow:latest
  #   container_name: redis_viewer_gsn
  #   restart: unless-stopped
  #   ports:
  #     - '5001:5001'
  #   environment:
  #     REBROW_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - gsn_network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend_gsn
    restart: unless-stopped
    expose:
      - '8000'
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gsn_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_gsn
    restart: unless-stopped
    expose:
      - '80'
    environment:
      - REACT_APP_API_URL=/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - gsn_network

networks:
  gsn_network:
    driver: bridge

volumes:
  pgdata:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
